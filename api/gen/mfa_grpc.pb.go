// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mfa.proto

package mfa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MFAService_EnableMFA_FullMethodName  = "/mfa.MFAService/EnableMFA"
	MFAService_VerifyMFA_FullMethodName  = "/mfa.MFAService/VerifyMFA"
	MFAService_DisableMFA_FullMethodName = "/mfa.MFAService/DisableMFA"
)

// MFAServiceClient is the client API for MFAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MFAServiceClient interface {
	EnableMFA(ctx context.Context, in *EnableMFARequest, opts ...grpc.CallOption) (*EnableMFAResponse, error)
	VerifyMFA(ctx context.Context, in *VerifyMFARequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error)
	DisableMFA(ctx context.Context, in *DisableMFARequest, opts ...grpc.CallOption) (*DisableMFAResponse, error)
}

type mFAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMFAServiceClient(cc grpc.ClientConnInterface) MFAServiceClient {
	return &mFAServiceClient{cc}
}

func (c *mFAServiceClient) EnableMFA(ctx context.Context, in *EnableMFARequest, opts ...grpc.CallOption) (*EnableMFAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableMFAResponse)
	err := c.cc.Invoke(ctx, MFAService_EnableMFA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mFAServiceClient) VerifyMFA(ctx context.Context, in *VerifyMFARequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyMFAResponse)
	err := c.cc.Invoke(ctx, MFAService_VerifyMFA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mFAServiceClient) DisableMFA(ctx context.Context, in *DisableMFARequest, opts ...grpc.CallOption) (*DisableMFAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableMFAResponse)
	err := c.cc.Invoke(ctx, MFAService_DisableMFA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MFAServiceServer is the server API for MFAService service.
// All implementations must embed UnimplementedMFAServiceServer
// for forward compatibility.
type MFAServiceServer interface {
	EnableMFA(context.Context, *EnableMFARequest) (*EnableMFAResponse, error)
	VerifyMFA(context.Context, *VerifyMFARequest) (*VerifyMFAResponse, error)
	DisableMFA(context.Context, *DisableMFARequest) (*DisableMFAResponse, error)
	mustEmbedUnimplementedMFAServiceServer()
}

// UnimplementedMFAServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMFAServiceServer struct{}

func (UnimplementedMFAServiceServer) EnableMFA(context.Context, *EnableMFARequest) (*EnableMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMFA not implemented")
}
func (UnimplementedMFAServiceServer) VerifyMFA(context.Context, *VerifyMFARequest) (*VerifyMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMFA not implemented")
}
func (UnimplementedMFAServiceServer) DisableMFA(context.Context, *DisableMFARequest) (*DisableMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMFA not implemented")
}
func (UnimplementedMFAServiceServer) mustEmbedUnimplementedMFAServiceServer() {}
func (UnimplementedMFAServiceServer) testEmbeddedByValue()                    {}

// UnsafeMFAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MFAServiceServer will
// result in compilation errors.
type UnsafeMFAServiceServer interface {
	mustEmbedUnimplementedMFAServiceServer()
}

func RegisterMFAServiceServer(s grpc.ServiceRegistrar, srv MFAServiceServer) {
	// If the following call pancis, it indicates UnimplementedMFAServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MFAService_ServiceDesc, srv)
}

func _MFAService_EnableMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MFAServiceServer).EnableMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MFAService_EnableMFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MFAServiceServer).EnableMFA(ctx, req.(*EnableMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MFAService_VerifyMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MFAServiceServer).VerifyMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MFAService_VerifyMFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MFAServiceServer).VerifyMFA(ctx, req.(*VerifyMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MFAService_DisableMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MFAServiceServer).DisableMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MFAService_DisableMFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MFAServiceServer).DisableMFA(ctx, req.(*DisableMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MFAService_ServiceDesc is the grpc.ServiceDesc for MFAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MFAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mfa.MFAService",
	HandlerType: (*MFAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableMFA",
			Handler:    _MFAService_EnableMFA_Handler,
		},
		{
			MethodName: "VerifyMFA",
			Handler:    _MFAService_VerifyMFA_Handler,
		},
		{
			MethodName: "DisableMFA",
			Handler:    _MFAService_DisableMFA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mfa.proto",
}
